
# PLEASE refer to ~/.gitconfig file for your git internal config, settings and other aliases.
alias vi.gitconfig='vi ~/.gitconfig'

# ALIASES
alias g='git'
complete -F _complete_alias g

## from file ~/.gitconfig:
alias gcr='git create'
alias gbr='git browse'
alias gcu='git copyUrl'
alias ggu='git getUrl'

alias gco='git commit -m'
alias gch='git checkout'
# Add autocompletion for gch <TAB> command, yo
complete -F _complete_alias gch

alias gd='git diff'
# alias gl='git log'
alias gl='git log --decorate --graph --oneline -10'
alias gch='git checkout'
alias gpul='git pull'
alias gpus='git push'
# gpulpus
alias gpulpus='git pull; git push'
alias gpp='gpulpus'
alias gcl='git clone'
alias gsh='git show'
alias gpp='git pull; git push'
# LEARN: ARCHIVING A GIT REPO:
# Usage: `garchive myBackupFile.zip main`, src: https://stackoverflow.com/a/55515739/10012446
alias garchive='git archive --format zip --output'
alias gitCleanResetHard='git clean -f && git reset --hard'
alias removeSubmodules='git rm'
# Usage: removeSubmodules pathToSubmodule

# FUNCTIONS
gi(){
	git init && create.gitignore && create.prettierrc.yaml
}

gac (){
    echo + git add -A
    git add -A

    echo + git commit -m \'$@\'
    git commit -m "$*" # gac life is amazing
}

# Usage: gacp life is super amazing. Usage: `gacps Added life to project.`
gacp (){
    echo + git add -A
    git add -A

    echo + git commit -m \'$@\'
    git commit -m "$*"

    echo + git push -u
    git push -u

}
#
# gacp Silent: Tested: Works good: Usage: `gacps Added life to project.`
gacps (){
    git add . 1> /dev/null 2> /dev/null
    git commit -m "$*" 1> /dev/null 2> /dev/null
    git push -u 1> /dev/null 2> /dev/null
}

gs (){
	# echo + git status $@
	# git status $@

	if [ -z "$1" ]; then
		# -z will send 0 (TRUE) return code if string is zero length, check `man test` for info.
		echo + git status .
		git status
	else
		echo + git status $1
		git status $1
	fi

}
gi (){
	echo + git init $@
	git init $@
}
gb (){
	echo + git branch $@
	git branch $@
}

ga (){
	if [ -z "$1" ]; then
		# -z will send 0 (TRUE) return code if string is zero length, check `man test` for info.
		echo + git add .
		git add .
	else
		echo + git add $1
		git add $1
	fi
}

# dry run
gad (){
	if [ -z "$1" ]; then
		# -z will send 0 (TRUE) return code if string is zero length, check `man test` for info.
		echo + git add . --dry-run
		git add . --dry-run
	else
		echo + git add $1 --dry-run
		git add $1 --dry-run
	fi
}


gitFetchWithoutCheckout () {
	echo git fetch . source:target
	echo Here, source is same in style as git merge source, but you get to specify to which branch you want it to get merged using branch specified after colon.
}


gFetchAll () {
	echo FYI: The 'pull' command is fetch+merge.
	git fetch --all
}

gpulAll () {
	#git pull --all #Note << that script won't merge any change to the local branch.
	hub sync ## Note, << that script will automatically merge if no local commits are made to the branches thats changed on origin, yikes!!! Also, it notifies that local commits to that branch were made and thus didn't merge the branch from the origin, yikes!!
}

